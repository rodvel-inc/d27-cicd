name: Terraform Destroy - Limpieza con LocalStack

# Solo ejecuci√≥n manual
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente a destruir'
        required: true
        type: choice
        options:
        - dev
        - staging
        - prod
      confirm:
        description: 'Escriba "DESTROY" para confirmar'
        required: true
        type: string

env:
  TF_VERSION: 1.6.0
  AWS_ACCESS_KEY_ID: test
  AWS_SECRET_ACCESS_KEY: test
  AWS_DEFAULT_REGION: us-east-1

jobs:
  destroy:
    name: üóëÔ∏è Destruir Infraestructura (LocalStack)
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    services:
      localstack:
        image: localstack/localstack:3.0
        ports:
          - 4566:4566
        env:
          SERVICES: s3,ec2,iam,lambda,cloudformation,logs,events
          DEBUG: 1
          DATA_DIR: /var/lib/localstack/data
          PERSISTENCE: 1
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Validar confirmaci√≥n
      run: |
        if [ "${{ github.event.inputs.confirm }}" != "DESTROY" ]; then
          echo "‚ùå Confirmaci√≥n incorrecta. Debe escribir 'DESTROY'"
          exit 1
        fi
        echo "‚úÖ Confirmaci√≥n v√°lida para ambiente: ${{ github.event.inputs.environment }}"
    
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Configurar permisos de scripts
      run: |
        chmod +x scripts/setup-localstack.sh
        chmod +x scripts/wait-for-localstack.sh
      
    - name: Setup Terraform y AWS CLI
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Setup AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        
    - name: Configurar LocalStack y S3 Backend
      run: |
        export AWS_ENDPOINT_URL=http://localhost:4566
        ./scripts/setup-localstack.sh
        
    - name: Terraform Init con S3 Backend
      run: |
        terraform init \
          -backend-config="endpoint=http://localhost:4566" \
          -backend-config="access_key=test" \
          -backend-config="secret_key=test"
      env:
        AWS_ENDPOINT_URL: http://localhost:4566
        
    - name: Seleccionar workspace
      run: terraform workspace select ${{ github.event.inputs.environment }}
      env:
        AWS_ENDPOINT_URL: http://localhost:4566
      
    - name: Verificar estado actual
      run: |
        echo "üìã Estado actual del ambiente ${{ github.event.inputs.environment }}:"
        terraform show
        
        echo "üì¶ Archivos en S3 antes de destruir:"
        aws --endpoint-url=http://localhost:4566 s3 ls s3://terraform-state-roxs/workspaces/${{ github.event.inputs.environment }}/ || echo "No hay archivos"
      
    - name: Plan destroy
      run: |
        terraform plan -destroy \
          -var-file="environments/${{ github.event.inputs.environment }}.tfvars" \
          -out=destroy.tfplan
      env:
        AWS_ENDPOINT_URL: http://localhost:4566
        TF_VAR_database_password: "dummy-password-for-destroy"
      
    - name: Mostrar qu√© se va a destruir
      run: terraform show -no-color destroy.tfplan
      
    - name: Destruir infraestructura
      run: terraform apply -auto-approve destroy.tfplan
      env:
        AWS_ENDPOINT_URL: http://localhost:4566
      
    - name: Confirmar destrucci√≥n
      run: |
        echo "üóëÔ∏è Infraestructura de ${{ github.event.inputs.environment }} destruida"
        echo "üìä Estado final:"
        terraform show
        
        echo "üì¶ Verificando limpieza en S3:"
        aws --endpoint-url=http://localhost:4566 s3 ls s3://terraform-state-roxs/workspaces/${{ github.event.inputs.environment }}/ || echo "‚úÖ Workspace limpio"
        
    - name: Limpiar workspace (opcional)
      if: github.event.inputs.environment != 'prod'
      run: |
        echo "üßπ Eliminando workspace de ${{ github.event.inputs.environment }}..."
        terraform workspace select default
        terraform workspace delete ${{ github.event.inputs.environment }} || echo "Workspace ya eliminado"
      env:
        AWS_ENDPOINT_URL: http://localhost:4566