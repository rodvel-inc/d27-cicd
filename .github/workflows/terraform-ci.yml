name: Terraform CI - Validaci√≥n con LocalStack

# Cu√°ndo ejecutar el pipeline
on:
  pull_request:
    branches: [main]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/**'
      - 'docker-compose.localstack.yml'

# Variables globales
env:
  TF_VERSION: 1.12.2
  AWS_ACCESS_KEY_ID: test
  AWS_SECRET_ACCESS_KEY: test
  AWS_DEFAULT_REGION: us-east-1
  AWS_ENDPOINT_URL: http://localhost:4566

jobs:
  # Job 1: Validaci√≥n b√°sica
  validate:
    name: Validar Terraform
    runs-on: ubuntu-latest
    
    services:
      localstack:
        image: localstack/localstack:3.0
        ports:
          - 4566:4566
        env:
          SERVICES: s3,ec2,iam,lambda,cloudformation,logs,events
          DEBUG: 1
          DATA_DIR: /var/lib/localstack/data
          PERSISTENCE: 1
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    # Paso 1: Descargar c√≥digo
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    # Paso 2: Configurar permisos para scripts
    - name: Configurar permisos de scripts
      run: |
        chmod +x scripts/setup-localstack.sh
        chmod +x scripts/wait-for-localstack.sh
      
    # Paso 3: Instalar Terraform y AWS CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Setup AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        
    # Paso 4: Configurar LocalStack
    - name: Configurar LocalStack
      run: |
        export AWS_ENDPOINT_URL=http://localhost:4566
        ./scripts/setup-localstack.sh
        
    # Paso 5: Verificar formato
    - name: Verificar formato de c√≥digo
      run: terraform fmt -check -recursive
      
    # Paso 6: Inicializar Terraform con backend S3
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="access_key=test" \
          -backend-config="secret_key=test"
      env:
        AWS_ENDPOINT_URL: http://localhost:4566
      
    # Paso 7: Validar sintaxis
    - name: Validar sintaxis
      run: terraform validate

  # Job 2: Generar plan para cada ambiente con LocalStack
  plan:
    name: Plan para Ambientes (LocalStack)
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        environment: [dev, staging]
    
    services:
      localstack:
        image: localstack/localstack:3.0
        ports:
          - 4566:4566
        env:
          SERVICES: s3,ec2,iam,lambda,cloudformation,logs,events
          DEBUG: 1
          DATA_DIR: /var/lib/localstack/data
          PERSISTENCE: 1
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Configurar permisos de scripts
      run: |
        chmod +x scripts/setup-localstack.sh
        chmod +x scripts/wait-for-localstack.sh
      
    - name: Setup Terraform y AWS CLI
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Setup AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        
    - name: Configurar LocalStack
      run: |
        export AWS_ENDPOINT_URL=http://localhost:4566
        ./scripts/setup-localstack.sh
        
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="access_key=test" \
          -backend-config="secret_key=test"
      env:
        AWS_ENDPOINT_URL: http://localhost:4566
      
    - name: Seleccionar workspace
      run: |
        terraform workspace select ${{ matrix.environment }} || \
        terraform workspace new ${{ matrix.environment }}
      env:
        AWS_ENDPOINT_URL: http://localhost:4566
      
    - name: Generar plan
      run: |
        terraform plan \
          -input=false \
          -var-file="environments/${{ matrix.environment }}.tfvars" \
          -out="${{ matrix.environment }}.tfplan"
      env:
        AWS_ENDPOINT_URL: http://localhost:4566
        TF_VAR_database_password: "ci-test-password-${{ matrix.environment }}"
      
    # Verificar recursos en LocalStack
    - name: Verificar recursos en LocalStack
      run: |
        echo "üìä Verificando recursos creados en LocalStack..."
        aws --endpoint-url=http://localhost:4566 s3 ls
        aws --endpoint-url=http://localhost:4566 s3 ls s3://terraform-state-roxs
      
    # Guardar el plan para usar en CD
    - name: Subir plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-${{ matrix.environment }}
        path: ${{ matrix.environment }}.tfplan
        retention-days: 1

  # Job 3: Comentar el plan en el PR
  comment-plan:
    name: Comentar Plan en PR
    runs-on: ubuntu-latest
    needs: plan
    if: github.event_name == 'pull_request'
    
    services:
      localstack:
        image: localstack/localstack:3.0
        ports:
          - 4566:4566
        env:
          SERVICES: s3,ec2,iam,lambda,cloudformation,logs,events
          DEBUG: 1
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Configurar permisos de scripts
      run: |
        chmod +x scripts/setup-localstack.sh
        chmod +x scripts/wait-for-localstack.sh
      
    - name: Setup Terraform y AWS CLI
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Setup AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        
    - name: Configurar LocalStack
      run: |
        export AWS_ENDPOINT_URL=http://localhost:4566
        ./scripts/setup-localstack.sh
        
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="access_key=test" \
          -backend-config="secret_key=test"
      env:
        AWS_ENDPOINT_URL: http://localhost:4566
        
    - name: Descargar plan de dev
      uses: actions/download-artifact@v3
      with:
        name: tfplan-dev
        
    - name: Mostrar plan en comentario
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Generar el plan en formato legible
          const { execSync } = require('child_process');
          const planOutput = execSync('terraform show -no-color dev.tfplan', { 
            encoding: 'utf8',
            env: { ...process.env, AWS_ENDPOINT_URL: 'http://localhost:4566' }
          });
          
          // Crear comentario
          const output = `## üìã Plan de Terraform (Dev) con LocalStack
          
          <details>
          <summary>Ver cambios propuestos</summary>
          
          \`\`\`
          ${planOutput}
          \`\`\`
          
          </details>
          
          **‚úÖ Validado con LocalStack**  
          **üì¶ Backend:** S3 (terraform-state-roxs)  
          **üåç Ambiente:** Desarrollo  
          `;
          
          // Publicar comentario
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });